# Docker Compose configuration for MCP Config Manager v2
# Development and production deployment setup

version: '3.8'

services:
  # Main application service
  mcp-config-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: mcp-config-manager-v2:latest
    container_name: mcp-config-manager-v2
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - CONFIG_PATH=/app/config
      - LOG_PATH=/app/logs
      - DATA_PATH=/app/data
      - HEALTH_CHECK_INTERVAL=30000
      - AUTO_BACKUP=true
      - BACKUP_INTERVAL=3600000
      - MAX_BACKUPS=10
    volumes:
      - config_data:/app/config
      - log_data:/app/logs
      - app_data:/app/data
      - backup_data:/app/backups
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Development service (overrides for development)
  mcp-config-manager-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    image: mcp-config-manager-v2:dev
    container_name: mcp-config-manager-v2-dev
    restart: "no"
    ports:
      - "3000:3000"
      - "3001:3001"  # Additional port for development tools
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - WEBPACK_DEV_SERVER=true
      - HOT_RELOAD=true
    volumes:
      - .:/app
      - /app/node_modules
      - config_dev_data:/app/config
      - log_dev_data:/app/logs
    networks:
      - mcp_network
    command: npm run dev
    profiles:
      - dev

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    networks:
      - mcp_network
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - full

  # PostgreSQL for persistent data storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mcpconfig}
      - POSTGRES_USER=${POSTGRES_USER:-mcpuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mcppassword}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcpuser} -d ${POSTGRES_DB:-mcpconfig}"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - full

  # Nginx reverse proxy for production
  nginx:
    image: nginx:1.25-alpine
    container_name: mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/logs:/var/log/nginx
    networks:
      - mcp_network
    depends_on:
      - mcp-config-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mcp_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: mcp-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - mcp_network
    command: -config.file=/etc/loki/local-config.yaml
    profiles:
      - logging

  # Log shipping with Promtail (optional)
  promtail:
    image: grafana/promtail:latest
    container_name: mcp-promtail
    restart: unless-stopped
    volumes:
      - ./docker/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - log_data:/var/log/app:ro
      - /var/log:/var/log/host:ro
    networks:
      - mcp_network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml
    profiles:
      - logging

# Named volumes for data persistence
volumes:
  config_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/config
  log_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/app
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/backups
  config_dev_data:
    driver: local
  log_dev_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# Networks
networks:
  mcp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16