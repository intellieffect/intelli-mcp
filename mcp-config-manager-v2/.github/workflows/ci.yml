name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run typecheck
        
      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false
        
      - name: Run integration tests
        run: npm run test:integration -- --coverage --watchAll=false
        
      - name: Run component tests
        run: npm run test:component -- --coverage --watchAll=false
        
      - name: Check type coverage
        run: npm run type-coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm run audit:security
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build:
    name: Build Application
    runs-on: ${{ matrix.os }}
    needs: [test]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run package -- --linux
        
      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run package -- --win
        
      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run package -- --mac
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: |
            dist/
            release/
          retention-days: 7

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, security, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive test coverage
        run: chmod +x scripts/test-coverage.sh && ./scripts/test-coverage.sh
        
      - name: Generate quality report
        run: |
          echo "## Quality Gates Summary" > quality-report.md
          echo "" >> quality-report.md
          echo "âœ… All tests passed" >> quality-report.md
          echo "âœ… Security audit passed" >> quality-report.md
          echo "âœ… Build successful on all platforms" >> quality-report.md
          echo "âœ… Code coverage â‰¥85%" >> quality-report.md
          echo "âœ… Type coverage â‰¥95%" >> quality-report.md
          echo "" >> quality-report.md
          echo "ðŸŽ‰ Ready for deployment!" >> quality-report.md
          
      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: |
            quality-report.md
            reports/
            coverage/
          retention-days: 30